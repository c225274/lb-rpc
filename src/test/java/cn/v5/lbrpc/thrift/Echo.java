/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.v5.lbrpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-20")
public class Echo {

  public interface Iface {

    public String echoReturnString(String p1, String p2) throws org.apache.thrift.TException;

    public void echoReturnVoid(double d1, int i2) throws org.apache.thrift.TException;

    public List<String> echoWithoutParams() throws org.apache.thrift.TException;

    public boolean echoSerializedException(ByteBuffer b) throws SerializedException, DeserializedException, org.apache.thrift.TException;

    public double echoRuntimeException(Set<Integer> s) throws org.apache.thrift.TException;

    public String echoTimeout(Map<Double,String> m) throws org.apache.thrift.TException;

    public String echoReturnNull() throws org.apache.thrift.TException;

    public String echoWithNullParameter(List<String> l) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void echoReturnString(String p1, String p2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echoReturnVoid(double d1, int i2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echoWithoutParams(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echoSerializedException(ByteBuffer b, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echoRuntimeException(Set<Integer> s, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echoTimeout(Map<Double,String> m, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echoReturnNull(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echoWithNullParameter(List<String> l, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String echoReturnString(String p1, String p2) throws org.apache.thrift.TException
    {
      send_echoReturnString(p1, p2);
      return recv_echoReturnString();
    }

    public void send_echoReturnString(String p1, String p2) throws org.apache.thrift.TException
    {
      echoReturnString_args args = new echoReturnString_args();
      args.setP1(p1);
      args.setP2(p2);
      sendBase("echoReturnString", args);
    }

    public String recv_echoReturnString() throws org.apache.thrift.TException
    {
      echoReturnString_result result = new echoReturnString_result();
      receiveBase(result, "echoReturnString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echoReturnString failed: unknown result");
    }

    public void echoReturnVoid(double d1, int i2) throws org.apache.thrift.TException
    {
      send_echoReturnVoid(d1, i2);
      recv_echoReturnVoid();
    }

    public void send_echoReturnVoid(double d1, int i2) throws org.apache.thrift.TException
    {
      echoReturnVoid_args args = new echoReturnVoid_args();
      args.setD1(d1);
      args.setI2(i2);
      sendBase("echoReturnVoid", args);
    }

    public void recv_echoReturnVoid() throws org.apache.thrift.TException
    {
      echoReturnVoid_result result = new echoReturnVoid_result();
      receiveBase(result, "echoReturnVoid");
      return;
    }

    public List<String> echoWithoutParams() throws org.apache.thrift.TException
    {
      send_echoWithoutParams();
      return recv_echoWithoutParams();
    }

    public void send_echoWithoutParams() throws org.apache.thrift.TException
    {
      echoWithoutParams_args args = new echoWithoutParams_args();
      sendBase("echoWithoutParams", args);
    }

    public List<String> recv_echoWithoutParams() throws org.apache.thrift.TException
    {
      echoWithoutParams_result result = new echoWithoutParams_result();
      receiveBase(result, "echoWithoutParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echoWithoutParams failed: unknown result");
    }

    public boolean echoSerializedException(ByteBuffer b) throws SerializedException, DeserializedException, org.apache.thrift.TException
    {
      send_echoSerializedException(b);
      return recv_echoSerializedException();
    }

    public void send_echoSerializedException(ByteBuffer b) throws org.apache.thrift.TException
    {
      echoSerializedException_args args = new echoSerializedException_args();
      args.setB(b);
      sendBase("echoSerializedException", args);
    }

    public boolean recv_echoSerializedException() throws SerializedException, DeserializedException, org.apache.thrift.TException
    {
      echoSerializedException_result result = new echoSerializedException_result();
      receiveBase(result, "echoSerializedException");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serializedException != null) {
        throw result.serializedException;
      }
      if (result.deserializedException != null) {
        throw result.deserializedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echoSerializedException failed: unknown result");
    }

    public double echoRuntimeException(Set<Integer> s) throws org.apache.thrift.TException
    {
      send_echoRuntimeException(s);
      return recv_echoRuntimeException();
    }

    public void send_echoRuntimeException(Set<Integer> s) throws org.apache.thrift.TException
    {
      echoRuntimeException_args args = new echoRuntimeException_args();
      args.setS(s);
      sendBase("echoRuntimeException", args);
    }

    public double recv_echoRuntimeException() throws org.apache.thrift.TException
    {
      echoRuntimeException_result result = new echoRuntimeException_result();
      receiveBase(result, "echoRuntimeException");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echoRuntimeException failed: unknown result");
    }

    public String echoTimeout(Map<Double,String> m) throws org.apache.thrift.TException
    {
      send_echoTimeout(m);
      return recv_echoTimeout();
    }

    public void send_echoTimeout(Map<Double,String> m) throws org.apache.thrift.TException
    {
      echoTimeout_args args = new echoTimeout_args();
      args.setM(m);
      sendBase("echoTimeout", args);
    }

    public String recv_echoTimeout() throws org.apache.thrift.TException
    {
      echoTimeout_result result = new echoTimeout_result();
      receiveBase(result, "echoTimeout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echoTimeout failed: unknown result");
    }

    public String echoReturnNull() throws org.apache.thrift.TException
    {
      send_echoReturnNull();
      return recv_echoReturnNull();
    }

    public void send_echoReturnNull() throws org.apache.thrift.TException
    {
      echoReturnNull_args args = new echoReturnNull_args();
      sendBase("echoReturnNull", args);
    }

    public String recv_echoReturnNull() throws org.apache.thrift.TException
    {
      echoReturnNull_result result = new echoReturnNull_result();
      receiveBase(result, "echoReturnNull");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echoReturnNull failed: unknown result");
    }

    public String echoWithNullParameter(List<String> l) throws org.apache.thrift.TException
    {
      send_echoWithNullParameter(l);
      return recv_echoWithNullParameter();
    }

    public void send_echoWithNullParameter(List<String> l) throws org.apache.thrift.TException
    {
      echoWithNullParameter_args args = new echoWithNullParameter_args();
      args.setL(l);
      sendBase("echoWithNullParameter", args);
    }

    public String recv_echoWithNullParameter() throws org.apache.thrift.TException
    {
      echoWithNullParameter_result result = new echoWithNullParameter_result();
      receiveBase(result, "echoWithNullParameter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echoWithNullParameter failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void echoReturnString(String p1, String p2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoReturnString_call method_call = new echoReturnString_call(p1, p2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoReturnString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String p1;
      private String p2;
      public echoReturnString_call(String p1, String p2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p1 = p1;
        this.p2 = p2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoReturnString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoReturnString_args args = new echoReturnString_args();
        args.setP1(p1);
        args.setP2(p2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echoReturnString();
      }
    }

    public void echoReturnVoid(double d1, int i2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoReturnVoid_call method_call = new echoReturnVoid_call(d1, i2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoReturnVoid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double d1;
      private int i2;
      public echoReturnVoid_call(double d1, int i2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.d1 = d1;
        this.i2 = i2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoReturnVoid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoReturnVoid_args args = new echoReturnVoid_args();
        args.setD1(d1);
        args.setI2(i2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_echoReturnVoid();
      }
    }

    public void echoWithoutParams(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoWithoutParams_call method_call = new echoWithoutParams_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoWithoutParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      public echoWithoutParams_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoWithoutParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoWithoutParams_args args = new echoWithoutParams_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echoWithoutParams();
      }
    }

    public void echoSerializedException(ByteBuffer b, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoSerializedException_call method_call = new echoSerializedException_call(b, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoSerializedException_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer b;
      public echoSerializedException_call(ByteBuffer b, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.b = b;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoSerializedException", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoSerializedException_args args = new echoSerializedException_args();
        args.setB(b);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws SerializedException, DeserializedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echoSerializedException();
      }
    }

    public void echoRuntimeException(Set<Integer> s, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoRuntimeException_call method_call = new echoRuntimeException_call(s, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoRuntimeException_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<Integer> s;
      public echoRuntimeException_call(Set<Integer> s, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.s = s;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoRuntimeException", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoRuntimeException_args args = new echoRuntimeException_args();
        args.setS(s);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echoRuntimeException();
      }
    }

    public void echoTimeout(Map<Double,String> m, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoTimeout_call method_call = new echoTimeout_call(m, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoTimeout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<Double,String> m;
      public echoTimeout_call(Map<Double,String> m, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.m = m;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoTimeout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoTimeout_args args = new echoTimeout_args();
        args.setM(m);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echoTimeout();
      }
    }

    public void echoReturnNull(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoReturnNull_call method_call = new echoReturnNull_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoReturnNull_call extends org.apache.thrift.async.TAsyncMethodCall {
      public echoReturnNull_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoReturnNull", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoReturnNull_args args = new echoReturnNull_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echoReturnNull();
      }
    }

    public void echoWithNullParameter(List<String> l, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echoWithNullParameter_call method_call = new echoWithNullParameter_call(l, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echoWithNullParameter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> l;
      public echoWithNullParameter_call(List<String> l, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.l = l;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echoWithNullParameter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echoWithNullParameter_args args = new echoWithNullParameter_args();
        args.setL(l);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echoWithNullParameter();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("echoReturnString", new echoReturnString());
      processMap.put("echoReturnVoid", new echoReturnVoid());
      processMap.put("echoWithoutParams", new echoWithoutParams());
      processMap.put("echoSerializedException", new echoSerializedException());
      processMap.put("echoRuntimeException", new echoRuntimeException());
      processMap.put("echoTimeout", new echoTimeout());
      processMap.put("echoReturnNull", new echoReturnNull());
      processMap.put("echoWithNullParameter", new echoWithNullParameter());
      return processMap;
    }

    public static class echoReturnString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoReturnString_args> {
      public echoReturnString() {
        super("echoReturnString");
      }

      public echoReturnString_args getEmptyArgsInstance() {
        return new echoReturnString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoReturnString_result getResult(I iface, echoReturnString_args args) throws org.apache.thrift.TException {
        echoReturnString_result result = new echoReturnString_result();
        result.success = iface.echoReturnString(args.p1, args.p2);
        return result;
      }
    }

    public static class echoReturnVoid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoReturnVoid_args> {
      public echoReturnVoid() {
        super("echoReturnVoid");
      }

      public echoReturnVoid_args getEmptyArgsInstance() {
        return new echoReturnVoid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoReturnVoid_result getResult(I iface, echoReturnVoid_args args) throws org.apache.thrift.TException {
        echoReturnVoid_result result = new echoReturnVoid_result();
        iface.echoReturnVoid(args.d1, args.i2);
        return result;
      }
    }

    public static class echoWithoutParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoWithoutParams_args> {
      public echoWithoutParams() {
        super("echoWithoutParams");
      }

      public echoWithoutParams_args getEmptyArgsInstance() {
        return new echoWithoutParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoWithoutParams_result getResult(I iface, echoWithoutParams_args args) throws org.apache.thrift.TException {
        echoWithoutParams_result result = new echoWithoutParams_result();
        result.success = iface.echoWithoutParams();
        return result;
      }
    }

    public static class echoSerializedException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoSerializedException_args> {
      public echoSerializedException() {
        super("echoSerializedException");
      }

      public echoSerializedException_args getEmptyArgsInstance() {
        return new echoSerializedException_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoSerializedException_result getResult(I iface, echoSerializedException_args args) throws org.apache.thrift.TException {
        echoSerializedException_result result = new echoSerializedException_result();
        try {
          result.success = iface.echoSerializedException(args.b);
          result.setSuccessIsSet(true);
        } catch (SerializedException serializedException) {
          result.serializedException = serializedException;
        } catch (DeserializedException deserializedException) {
          result.deserializedException = deserializedException;
        }
        return result;
      }
    }

    public static class echoRuntimeException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoRuntimeException_args> {
      public echoRuntimeException() {
        super("echoRuntimeException");
      }

      public echoRuntimeException_args getEmptyArgsInstance() {
        return new echoRuntimeException_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoRuntimeException_result getResult(I iface, echoRuntimeException_args args) throws org.apache.thrift.TException {
        echoRuntimeException_result result = new echoRuntimeException_result();
        result.success = iface.echoRuntimeException(args.s);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class echoTimeout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoTimeout_args> {
      public echoTimeout() {
        super("echoTimeout");
      }

      public echoTimeout_args getEmptyArgsInstance() {
        return new echoTimeout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoTimeout_result getResult(I iface, echoTimeout_args args) throws org.apache.thrift.TException {
        echoTimeout_result result = new echoTimeout_result();
        result.success = iface.echoTimeout(args.m);
        return result;
      }
    }

    public static class echoReturnNull<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoReturnNull_args> {
      public echoReturnNull() {
        super("echoReturnNull");
      }

      public echoReturnNull_args getEmptyArgsInstance() {
        return new echoReturnNull_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoReturnNull_result getResult(I iface, echoReturnNull_args args) throws org.apache.thrift.TException {
        echoReturnNull_result result = new echoReturnNull_result();
        result.success = iface.echoReturnNull();
        return result;
      }
    }

    public static class echoWithNullParameter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echoWithNullParameter_args> {
      public echoWithNullParameter() {
        super("echoWithNullParameter");
      }

      public echoWithNullParameter_args getEmptyArgsInstance() {
        return new echoWithNullParameter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echoWithNullParameter_result getResult(I iface, echoWithNullParameter_args args) throws org.apache.thrift.TException {
        echoWithNullParameter_result result = new echoWithNullParameter_result();
        result.success = iface.echoWithNullParameter(args.l);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("echoReturnString", new echoReturnString());
      processMap.put("echoReturnVoid", new echoReturnVoid());
      processMap.put("echoWithoutParams", new echoWithoutParams());
      processMap.put("echoSerializedException", new echoSerializedException());
      processMap.put("echoRuntimeException", new echoRuntimeException());
      processMap.put("echoTimeout", new echoTimeout());
      processMap.put("echoReturnNull", new echoReturnNull());
      processMap.put("echoWithNullParameter", new echoWithNullParameter());
      return processMap;
    }

    public static class echoReturnString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoReturnString_args, String> {
      public echoReturnString() {
        super("echoReturnString");
      }

      public echoReturnString_args getEmptyArgsInstance() {
        return new echoReturnString_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            echoReturnString_result result = new echoReturnString_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoReturnString_result result = new echoReturnString_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoReturnString_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.echoReturnString(args.p1, args.p2,resultHandler);
      }
    }

    public static class echoReturnVoid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoReturnVoid_args, Void> {
      public echoReturnVoid() {
        super("echoReturnVoid");
      }

      public echoReturnVoid_args getEmptyArgsInstance() {
        return new echoReturnVoid_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            echoReturnVoid_result result = new echoReturnVoid_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoReturnVoid_result result = new echoReturnVoid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoReturnVoid_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.echoReturnVoid(args.d1, args.i2,resultHandler);
      }
    }

    public static class echoWithoutParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoWithoutParams_args, List<String>> {
      public echoWithoutParams() {
        super("echoWithoutParams");
      }

      public echoWithoutParams_args getEmptyArgsInstance() {
        return new echoWithoutParams_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            echoWithoutParams_result result = new echoWithoutParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoWithoutParams_result result = new echoWithoutParams_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoWithoutParams_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.echoWithoutParams(resultHandler);
      }
    }

    public static class echoSerializedException<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoSerializedException_args, Boolean> {
      public echoSerializedException() {
        super("echoSerializedException");
      }

      public echoSerializedException_args getEmptyArgsInstance() {
        return new echoSerializedException_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            echoSerializedException_result result = new echoSerializedException_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoSerializedException_result result = new echoSerializedException_result();
            if (e instanceof SerializedException) {
                        result.serializedException = (SerializedException) e;
                        result.setSerializedExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof DeserializedException) {
                        result.deserializedException = (DeserializedException) e;
                        result.setDeserializedExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoSerializedException_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.echoSerializedException(args.b,resultHandler);
      }
    }

    public static class echoRuntimeException<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoRuntimeException_args, Double> {
      public echoRuntimeException() {
        super("echoRuntimeException");
      }

      public echoRuntimeException_args getEmptyArgsInstance() {
        return new echoRuntimeException_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            echoRuntimeException_result result = new echoRuntimeException_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoRuntimeException_result result = new echoRuntimeException_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoRuntimeException_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.echoRuntimeException(args.s,resultHandler);
      }
    }

    public static class echoTimeout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoTimeout_args, String> {
      public echoTimeout() {
        super("echoTimeout");
      }

      public echoTimeout_args getEmptyArgsInstance() {
        return new echoTimeout_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            echoTimeout_result result = new echoTimeout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoTimeout_result result = new echoTimeout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoTimeout_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.echoTimeout(args.m,resultHandler);
      }
    }

    public static class echoReturnNull<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoReturnNull_args, String> {
      public echoReturnNull() {
        super("echoReturnNull");
      }

      public echoReturnNull_args getEmptyArgsInstance() {
        return new echoReturnNull_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            echoReturnNull_result result = new echoReturnNull_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoReturnNull_result result = new echoReturnNull_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoReturnNull_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.echoReturnNull(resultHandler);
      }
    }

    public static class echoWithNullParameter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echoWithNullParameter_args, String> {
      public echoWithNullParameter() {
        super("echoWithNullParameter");
      }

      public echoWithNullParameter_args getEmptyArgsInstance() {
        return new echoWithNullParameter_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            echoWithNullParameter_result result = new echoWithNullParameter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echoWithNullParameter_result result = new echoWithNullParameter_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echoWithNullParameter_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.echoWithNullParameter(args.l,resultHandler);
      }
    }

  }

  public static class echoReturnString_args implements org.apache.thrift.TBase<echoReturnString_args, echoReturnString_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoReturnString_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoReturnString_args");

    private static final org.apache.thrift.protocol.TField P1_FIELD_DESC = new org.apache.thrift.protocol.TField("p1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField P2_FIELD_DESC = new org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoReturnString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoReturnString_argsTupleSchemeFactory());
    }

    public String p1; // required
    public String p2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P1((short)1, "p1"),
      P2((short)2, "p2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P1
            return P1;
          case 2: // P2
            return P2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P1, new org.apache.thrift.meta_data.FieldMetaData("p1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P2, new org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoReturnString_args.class, metaDataMap);
    }

    public echoReturnString_args() {
    }

    public echoReturnString_args(
      String p1,
      String p2)
    {
      this();
      this.p1 = p1;
      this.p2 = p2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoReturnString_args(echoReturnString_args other) {
      if (other.isSetP1()) {
        this.p1 = other.p1;
      }
      if (other.isSetP2()) {
        this.p2 = other.p2;
      }
    }

    public echoReturnString_args deepCopy() {
      return new echoReturnString_args(this);
    }

    @Override
    public void clear() {
      this.p1 = null;
      this.p2 = null;
    }

    public String getP1() {
      return this.p1;
    }

    public echoReturnString_args setP1(String p1) {
      this.p1 = p1;
      return this;
    }

    public void unsetP1() {
      this.p1 = null;
    }

    /** Returns true if field p1 is set (has been assigned a value) and false otherwise */
    public boolean isSetP1() {
      return this.p1 != null;
    }

    public void setP1IsSet(boolean value) {
      if (!value) {
        this.p1 = null;
      }
    }

    public String getP2() {
      return this.p2;
    }

    public echoReturnString_args setP2(String p2) {
      this.p2 = p2;
      return this;
    }

    public void unsetP2() {
      this.p2 = null;
    }

    /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
    public boolean isSetP2() {
      return this.p2 != null;
    }

    public void setP2IsSet(boolean value) {
      if (!value) {
        this.p2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P1:
        if (value == null) {
          unsetP1();
        } else {
          setP1((String)value);
        }
        break;

      case P2:
        if (value == null) {
          unsetP2();
        } else {
          setP2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P1:
        return getP1();

      case P2:
        return getP2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P1:
        return isSetP1();
      case P2:
        return isSetP2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoReturnString_args)
        return this.equals((echoReturnString_args)that);
      return false;
    }

    public boolean equals(echoReturnString_args that) {
      if (that == null)
        return false;

      boolean this_present_p1 = true && this.isSetP1();
      boolean that_present_p1 = true && that.isSetP1();
      if (this_present_p1 || that_present_p1) {
        if (!(this_present_p1 && that_present_p1))
          return false;
        if (!this.p1.equals(that.p1))
          return false;
      }

      boolean this_present_p2 = true && this.isSetP2();
      boolean that_present_p2 = true && that.isSetP2();
      if (this_present_p2 || that_present_p2) {
        if (!(this_present_p2 && that_present_p2))
          return false;
        if (!this.p2.equals(that.p2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p1 = true && (isSetP1());
      list.add(present_p1);
      if (present_p1)
        list.add(p1);

      boolean present_p2 = true && (isSetP2());
      list.add(present_p2);
      if (present_p2)
        list.add(p2);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoReturnString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP1()).compareTo(other.isSetP1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p1, other.p1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP2()).compareTo(other.isSetP2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoReturnString_args(");
      boolean first = true;

      sb.append("p1:");
      if (this.p1 == null) {
        sb.append("null");
      } else {
        sb.append(this.p1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p2:");
      if (this.p2 == null) {
        sb.append("null");
      } else {
        sb.append(this.p2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoReturnString_argsStandardSchemeFactory implements SchemeFactory {
      public echoReturnString_argsStandardScheme getScheme() {
        return new echoReturnString_argsStandardScheme();
      }
    }

    private static class echoReturnString_argsStandardScheme extends StandardScheme<echoReturnString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoReturnString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p1 = iprot.readString();
                struct.setP1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p2 = iprot.readString();
                struct.setP2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoReturnString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p1 != null) {
          oprot.writeFieldBegin(P1_FIELD_DESC);
          oprot.writeString(struct.p1);
          oprot.writeFieldEnd();
        }
        if (struct.p2 != null) {
          oprot.writeFieldBegin(P2_FIELD_DESC);
          oprot.writeString(struct.p2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoReturnString_argsTupleSchemeFactory implements SchemeFactory {
      public echoReturnString_argsTupleScheme getScheme() {
        return new echoReturnString_argsTupleScheme();
      }
    }

    private static class echoReturnString_argsTupleScheme extends TupleScheme<echoReturnString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoReturnString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP1()) {
          optionals.set(0);
        }
        if (struct.isSetP2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP1()) {
          oprot.writeString(struct.p1);
        }
        if (struct.isSetP2()) {
          oprot.writeString(struct.p2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoReturnString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p1 = iprot.readString();
          struct.setP1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.p2 = iprot.readString();
          struct.setP2IsSet(true);
        }
      }
    }

  }

  public static class echoReturnString_result implements org.apache.thrift.TBase<echoReturnString_result, echoReturnString_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoReturnString_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoReturnString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoReturnString_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoReturnString_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoReturnString_result.class, metaDataMap);
    }

    public echoReturnString_result() {
    }

    public echoReturnString_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoReturnString_result(echoReturnString_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public echoReturnString_result deepCopy() {
      return new echoReturnString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public echoReturnString_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoReturnString_result)
        return this.equals((echoReturnString_result)that);
      return false;
    }

    public boolean equals(echoReturnString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoReturnString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoReturnString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoReturnString_resultStandardSchemeFactory implements SchemeFactory {
      public echoReturnString_resultStandardScheme getScheme() {
        return new echoReturnString_resultStandardScheme();
      }
    }

    private static class echoReturnString_resultStandardScheme extends StandardScheme<echoReturnString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoReturnString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoReturnString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoReturnString_resultTupleSchemeFactory implements SchemeFactory {
      public echoReturnString_resultTupleScheme getScheme() {
        return new echoReturnString_resultTupleScheme();
      }
    }

    private static class echoReturnString_resultTupleScheme extends TupleScheme<echoReturnString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoReturnString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoReturnString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echoReturnVoid_args implements org.apache.thrift.TBase<echoReturnVoid_args, echoReturnVoid_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoReturnVoid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoReturnVoid_args");

    private static final org.apache.thrift.protocol.TField D1_FIELD_DESC = new org.apache.thrift.protocol.TField("d1", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField I2_FIELD_DESC = new org.apache.thrift.protocol.TField("i2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoReturnVoid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoReturnVoid_argsTupleSchemeFactory());
    }

    public double d1; // required
    public int i2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      D1((short)1, "d1"),
      I2((short)2, "i2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // D1
            return D1;
          case 2: // I2
            return I2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __D1_ISSET_ID = 0;
    private static final int __I2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.D1, new org.apache.thrift.meta_data.FieldMetaData("d1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.I2, new org.apache.thrift.meta_data.FieldMetaData("i2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoReturnVoid_args.class, metaDataMap);
    }

    public echoReturnVoid_args() {
    }

    public echoReturnVoid_args(
      double d1,
      int i2)
    {
      this();
      this.d1 = d1;
      setD1IsSet(true);
      this.i2 = i2;
      setI2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoReturnVoid_args(echoReturnVoid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.d1 = other.d1;
      this.i2 = other.i2;
    }

    public echoReturnVoid_args deepCopy() {
      return new echoReturnVoid_args(this);
    }

    @Override
    public void clear() {
      setD1IsSet(false);
      this.d1 = 0.0;
      setI2IsSet(false);
      this.i2 = 0;
    }

    public double getD1() {
      return this.d1;
    }

    public echoReturnVoid_args setD1(double d1) {
      this.d1 = d1;
      setD1IsSet(true);
      return this;
    }

    public void unsetD1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D1_ISSET_ID);
    }

    /** Returns true if field d1 is set (has been assigned a value) and false otherwise */
    public boolean isSetD1() {
      return EncodingUtils.testBit(__isset_bitfield, __D1_ISSET_ID);
    }

    public void setD1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D1_ISSET_ID, value);
    }

    public int getI2() {
      return this.i2;
    }

    public echoReturnVoid_args setI2(int i2) {
      this.i2 = i2;
      setI2IsSet(true);
      return this;
    }

    public void unsetI2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I2_ISSET_ID);
    }

    /** Returns true if field i2 is set (has been assigned a value) and false otherwise */
    public boolean isSetI2() {
      return EncodingUtils.testBit(__isset_bitfield, __I2_ISSET_ID);
    }

    public void setI2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case D1:
        if (value == null) {
          unsetD1();
        } else {
          setD1((Double)value);
        }
        break;

      case I2:
        if (value == null) {
          unsetI2();
        } else {
          setI2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case D1:
        return Double.valueOf(getD1());

      case I2:
        return Integer.valueOf(getI2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case D1:
        return isSetD1();
      case I2:
        return isSetI2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoReturnVoid_args)
        return this.equals((echoReturnVoid_args)that);
      return false;
    }

    public boolean equals(echoReturnVoid_args that) {
      if (that == null)
        return false;

      boolean this_present_d1 = true;
      boolean that_present_d1 = true;
      if (this_present_d1 || that_present_d1) {
        if (!(this_present_d1 && that_present_d1))
          return false;
        if (this.d1 != that.d1)
          return false;
      }

      boolean this_present_i2 = true;
      boolean that_present_i2 = true;
      if (this_present_i2 || that_present_i2) {
        if (!(this_present_i2 && that_present_i2))
          return false;
        if (this.i2 != that.i2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_d1 = true;
      list.add(present_d1);
      if (present_d1)
        list.add(d1);

      boolean present_i2 = true;
      list.add(present_i2);
      if (present_i2)
        list.add(i2);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoReturnVoid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetD1()).compareTo(other.isSetD1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d1, other.d1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetI2()).compareTo(other.isSetI2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetI2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i2, other.i2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoReturnVoid_args(");
      boolean first = true;

      sb.append("d1:");
      sb.append(this.d1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("i2:");
      sb.append(this.i2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoReturnVoid_argsStandardSchemeFactory implements SchemeFactory {
      public echoReturnVoid_argsStandardScheme getScheme() {
        return new echoReturnVoid_argsStandardScheme();
      }
    }

    private static class echoReturnVoid_argsStandardScheme extends StandardScheme<echoReturnVoid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoReturnVoid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // D1
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.d1 = iprot.readDouble();
                struct.setD1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.i2 = iprot.readI32();
                struct.setI2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoReturnVoid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(D1_FIELD_DESC);
        oprot.writeDouble(struct.d1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(I2_FIELD_DESC);
        oprot.writeI32(struct.i2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoReturnVoid_argsTupleSchemeFactory implements SchemeFactory {
      public echoReturnVoid_argsTupleScheme getScheme() {
        return new echoReturnVoid_argsTupleScheme();
      }
    }

    private static class echoReturnVoid_argsTupleScheme extends TupleScheme<echoReturnVoid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoReturnVoid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetD1()) {
          optionals.set(0);
        }
        if (struct.isSetI2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetD1()) {
          oprot.writeDouble(struct.d1);
        }
        if (struct.isSetI2()) {
          oprot.writeI32(struct.i2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoReturnVoid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.d1 = iprot.readDouble();
          struct.setD1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.i2 = iprot.readI32();
          struct.setI2IsSet(true);
        }
      }
    }

  }

  public static class echoReturnVoid_result implements org.apache.thrift.TBase<echoReturnVoid_result, echoReturnVoid_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoReturnVoid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoReturnVoid_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoReturnVoid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoReturnVoid_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoReturnVoid_result.class, metaDataMap);
    }

    public echoReturnVoid_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoReturnVoid_result(echoReturnVoid_result other) {
    }

    public echoReturnVoid_result deepCopy() {
      return new echoReturnVoid_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoReturnVoid_result)
        return this.equals((echoReturnVoid_result)that);
      return false;
    }

    public boolean equals(echoReturnVoid_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(echoReturnVoid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoReturnVoid_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoReturnVoid_resultStandardSchemeFactory implements SchemeFactory {
      public echoReturnVoid_resultStandardScheme getScheme() {
        return new echoReturnVoid_resultStandardScheme();
      }
    }

    private static class echoReturnVoid_resultStandardScheme extends StandardScheme<echoReturnVoid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoReturnVoid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoReturnVoid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoReturnVoid_resultTupleSchemeFactory implements SchemeFactory {
      public echoReturnVoid_resultTupleScheme getScheme() {
        return new echoReturnVoid_resultTupleScheme();
      }
    }

    private static class echoReturnVoid_resultTupleScheme extends TupleScheme<echoReturnVoid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoReturnVoid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoReturnVoid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class echoWithoutParams_args implements org.apache.thrift.TBase<echoWithoutParams_args, echoWithoutParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoWithoutParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoWithoutParams_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoWithoutParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoWithoutParams_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoWithoutParams_args.class, metaDataMap);
    }

    public echoWithoutParams_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoWithoutParams_args(echoWithoutParams_args other) {
    }

    public echoWithoutParams_args deepCopy() {
      return new echoWithoutParams_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoWithoutParams_args)
        return this.equals((echoWithoutParams_args)that);
      return false;
    }

    public boolean equals(echoWithoutParams_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(echoWithoutParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoWithoutParams_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoWithoutParams_argsStandardSchemeFactory implements SchemeFactory {
      public echoWithoutParams_argsStandardScheme getScheme() {
        return new echoWithoutParams_argsStandardScheme();
      }
    }

    private static class echoWithoutParams_argsStandardScheme extends StandardScheme<echoWithoutParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoWithoutParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoWithoutParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoWithoutParams_argsTupleSchemeFactory implements SchemeFactory {
      public echoWithoutParams_argsTupleScheme getScheme() {
        return new echoWithoutParams_argsTupleScheme();
      }
    }

    private static class echoWithoutParams_argsTupleScheme extends TupleScheme<echoWithoutParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoWithoutParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoWithoutParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class echoWithoutParams_result implements org.apache.thrift.TBase<echoWithoutParams_result, echoWithoutParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoWithoutParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoWithoutParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoWithoutParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoWithoutParams_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoWithoutParams_result.class, metaDataMap);
    }

    public echoWithoutParams_result() {
    }

    public echoWithoutParams_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoWithoutParams_result(echoWithoutParams_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public echoWithoutParams_result deepCopy() {
      return new echoWithoutParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public echoWithoutParams_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoWithoutParams_result)
        return this.equals((echoWithoutParams_result)that);
      return false;
    }

    public boolean equals(echoWithoutParams_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoWithoutParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoWithoutParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoWithoutParams_resultStandardSchemeFactory implements SchemeFactory {
      public echoWithoutParams_resultStandardScheme getScheme() {
        return new echoWithoutParams_resultStandardScheme();
      }
    }

    private static class echoWithoutParams_resultStandardScheme extends StandardScheme<echoWithoutParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoWithoutParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoWithoutParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoWithoutParams_resultTupleSchemeFactory implements SchemeFactory {
      public echoWithoutParams_resultTupleScheme getScheme() {
        return new echoWithoutParams_resultTupleScheme();
      }
    }

    private static class echoWithoutParams_resultTupleScheme extends TupleScheme<echoWithoutParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoWithoutParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoWithoutParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echoSerializedException_args implements org.apache.thrift.TBase<echoSerializedException_args, echoSerializedException_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoSerializedException_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoSerializedException_args");

    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoSerializedException_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoSerializedException_argsTupleSchemeFactory());
    }

    public ByteBuffer b; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      B((short)1, "b");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // B
            return B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoSerializedException_args.class, metaDataMap);
    }

    public echoSerializedException_args() {
    }

    public echoSerializedException_args(
      ByteBuffer b)
    {
      this();
      this.b = org.apache.thrift.TBaseHelper.copyBinary(b);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoSerializedException_args(echoSerializedException_args other) {
      if (other.isSetB()) {
        this.b = org.apache.thrift.TBaseHelper.copyBinary(other.b);
      }
    }

    public echoSerializedException_args deepCopy() {
      return new echoSerializedException_args(this);
    }

    @Override
    public void clear() {
      this.b = null;
    }

    public byte[] getB() {
      setB(org.apache.thrift.TBaseHelper.rightSize(b));
      return b == null ? null : b.array();
    }

    public ByteBuffer bufferForB() {
      return org.apache.thrift.TBaseHelper.copyBinary(b);
    }

    public echoSerializedException_args setB(byte[] b) {
      this.b = b == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(b, b.length));
      return this;
    }

    public echoSerializedException_args setB(ByteBuffer b) {
      this.b = org.apache.thrift.TBaseHelper.copyBinary(b);
      return this;
    }

    public void unsetB() {
      this.b = null;
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
      return this.b != null;
    }

    public void setBIsSet(boolean value) {
      if (!value) {
        this.b = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case B:
        if (value == null) {
          unsetB();
        } else {
          setB((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case B:
        return getB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case B:
        return isSetB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoSerializedException_args)
        return this.equals((echoSerializedException_args)that);
      return false;
    }

    public boolean equals(echoSerializedException_args that) {
      if (that == null)
        return false;

      boolean this_present_b = true && this.isSetB();
      boolean that_present_b = true && that.isSetB();
      if (this_present_b || that_present_b) {
        if (!(this_present_b && that_present_b))
          return false;
        if (!this.b.equals(that.b))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_b = true && (isSetB());
      list.add(present_b);
      if (present_b)
        list.add(b);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoSerializedException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoSerializedException_args(");
      boolean first = true;

      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.b, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoSerializedException_argsStandardSchemeFactory implements SchemeFactory {
      public echoSerializedException_argsStandardScheme getScheme() {
        return new echoSerializedException_argsStandardScheme();
      }
    }

    private static class echoSerializedException_argsStandardScheme extends StandardScheme<echoSerializedException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoSerializedException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.b = iprot.readBinary();
                struct.setBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoSerializedException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.b != null) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          oprot.writeBinary(struct.b);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoSerializedException_argsTupleSchemeFactory implements SchemeFactory {
      public echoSerializedException_argsTupleScheme getScheme() {
        return new echoSerializedException_argsTupleScheme();
      }
    }

    private static class echoSerializedException_argsTupleScheme extends TupleScheme<echoSerializedException_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoSerializedException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetB()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetB()) {
          oprot.writeBinary(struct.b);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoSerializedException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.b = iprot.readBinary();
          struct.setBIsSet(true);
        }
      }
    }

  }

  public static class echoSerializedException_result implements org.apache.thrift.TBase<echoSerializedException_result, echoSerializedException_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoSerializedException_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoSerializedException_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SERIALIZED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serializedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DESERIALIZED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deserializedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoSerializedException_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoSerializedException_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public SerializedException serializedException; // required
    public DeserializedException deserializedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERIALIZED_EXCEPTION((short)1, "serializedException"),
      DESERIALIZED_EXCEPTION((short)2, "deserializedException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERIALIZED_EXCEPTION
            return SERIALIZED_EXCEPTION;
          case 2: // DESERIALIZED_EXCEPTION
            return DESERIALIZED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SERIALIZED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serializedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DESERIALIZED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("deserializedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoSerializedException_result.class, metaDataMap);
    }

    public echoSerializedException_result() {
    }

    public echoSerializedException_result(
      boolean success,
      SerializedException serializedException,
      DeserializedException deserializedException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.serializedException = serializedException;
      this.deserializedException = deserializedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoSerializedException_result(echoSerializedException_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSerializedException()) {
        this.serializedException = new SerializedException(other.serializedException);
      }
      if (other.isSetDeserializedException()) {
        this.deserializedException = new DeserializedException(other.deserializedException);
      }
    }

    public echoSerializedException_result deepCopy() {
      return new echoSerializedException_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.serializedException = null;
      this.deserializedException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public echoSerializedException_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SerializedException getSerializedException() {
      return this.serializedException;
    }

    public echoSerializedException_result setSerializedException(SerializedException serializedException) {
      this.serializedException = serializedException;
      return this;
    }

    public void unsetSerializedException() {
      this.serializedException = null;
    }

    /** Returns true if field serializedException is set (has been assigned a value) and false otherwise */
    public boolean isSetSerializedException() {
      return this.serializedException != null;
    }

    public void setSerializedExceptionIsSet(boolean value) {
      if (!value) {
        this.serializedException = null;
      }
    }

    public DeserializedException getDeserializedException() {
      return this.deserializedException;
    }

    public echoSerializedException_result setDeserializedException(DeserializedException deserializedException) {
      this.deserializedException = deserializedException;
      return this;
    }

    public void unsetDeserializedException() {
      this.deserializedException = null;
    }

    /** Returns true if field deserializedException is set (has been assigned a value) and false otherwise */
    public boolean isSetDeserializedException() {
      return this.deserializedException != null;
    }

    public void setDeserializedExceptionIsSet(boolean value) {
      if (!value) {
        this.deserializedException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case SERIALIZED_EXCEPTION:
        if (value == null) {
          unsetSerializedException();
        } else {
          setSerializedException((SerializedException)value);
        }
        break;

      case DESERIALIZED_EXCEPTION:
        if (value == null) {
          unsetDeserializedException();
        } else {
          setDeserializedException((DeserializedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case SERIALIZED_EXCEPTION:
        return getSerializedException();

      case DESERIALIZED_EXCEPTION:
        return getDeserializedException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERIALIZED_EXCEPTION:
        return isSetSerializedException();
      case DESERIALIZED_EXCEPTION:
        return isSetDeserializedException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoSerializedException_result)
        return this.equals((echoSerializedException_result)that);
      return false;
    }

    public boolean equals(echoSerializedException_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_serializedException = true && this.isSetSerializedException();
      boolean that_present_serializedException = true && that.isSetSerializedException();
      if (this_present_serializedException || that_present_serializedException) {
        if (!(this_present_serializedException && that_present_serializedException))
          return false;
        if (!this.serializedException.equals(that.serializedException))
          return false;
      }

      boolean this_present_deserializedException = true && this.isSetDeserializedException();
      boolean that_present_deserializedException = true && that.isSetDeserializedException();
      if (this_present_deserializedException || that_present_deserializedException) {
        if (!(this_present_deserializedException && that_present_deserializedException))
          return false;
        if (!this.deserializedException.equals(that.deserializedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_serializedException = true && (isSetSerializedException());
      list.add(present_serializedException);
      if (present_serializedException)
        list.add(serializedException);

      boolean present_deserializedException = true && (isSetDeserializedException());
      list.add(present_deserializedException);
      if (present_deserializedException)
        list.add(deserializedException);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoSerializedException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSerializedException()).compareTo(other.isSetSerializedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSerializedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serializedException, other.serializedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeserializedException()).compareTo(other.isSetDeserializedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeserializedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deserializedException, other.deserializedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoSerializedException_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serializedException:");
      if (this.serializedException == null) {
        sb.append("null");
      } else {
        sb.append(this.serializedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deserializedException:");
      if (this.deserializedException == null) {
        sb.append("null");
      } else {
        sb.append(this.deserializedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoSerializedException_resultStandardSchemeFactory implements SchemeFactory {
      public echoSerializedException_resultStandardScheme getScheme() {
        return new echoSerializedException_resultStandardScheme();
      }
    }

    private static class echoSerializedException_resultStandardScheme extends StandardScheme<echoSerializedException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoSerializedException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERIALIZED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serializedException = new SerializedException();
                struct.serializedException.read(iprot);
                struct.setSerializedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DESERIALIZED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deserializedException = new DeserializedException();
                struct.deserializedException.read(iprot);
                struct.setDeserializedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoSerializedException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.serializedException != null) {
          oprot.writeFieldBegin(SERIALIZED_EXCEPTION_FIELD_DESC);
          struct.serializedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.deserializedException != null) {
          oprot.writeFieldBegin(DESERIALIZED_EXCEPTION_FIELD_DESC);
          struct.deserializedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoSerializedException_resultTupleSchemeFactory implements SchemeFactory {
      public echoSerializedException_resultTupleScheme getScheme() {
        return new echoSerializedException_resultTupleScheme();
      }
    }

    private static class echoSerializedException_resultTupleScheme extends TupleScheme<echoSerializedException_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoSerializedException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSerializedException()) {
          optionals.set(1);
        }
        if (struct.isSetDeserializedException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSerializedException()) {
          struct.serializedException.write(oprot);
        }
        if (struct.isSetDeserializedException()) {
          struct.deserializedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoSerializedException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serializedException = new SerializedException();
          struct.serializedException.read(iprot);
          struct.setSerializedExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.deserializedException = new DeserializedException();
          struct.deserializedException.read(iprot);
          struct.setDeserializedExceptionIsSet(true);
        }
      }
    }

  }

  public static class echoRuntimeException_args implements org.apache.thrift.TBase<echoRuntimeException_args, echoRuntimeException_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoRuntimeException_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoRuntimeException_args");

    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.SET, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoRuntimeException_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoRuntimeException_argsTupleSchemeFactory());
    }

    public Set<Integer> s; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      S((short)1, "s");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // S
            return S;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoRuntimeException_args.class, metaDataMap);
    }

    public echoRuntimeException_args() {
    }

    public echoRuntimeException_args(
      Set<Integer> s)
    {
      this();
      this.s = s;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoRuntimeException_args(echoRuntimeException_args other) {
      if (other.isSetS()) {
        Set<Integer> __this__s = new HashSet<Integer>(other.s);
        this.s = __this__s;
      }
    }

    public echoRuntimeException_args deepCopy() {
      return new echoRuntimeException_args(this);
    }

    @Override
    public void clear() {
      this.s = null;
    }

    public int getSSize() {
      return (this.s == null) ? 0 : this.s.size();
    }

    public java.util.Iterator<Integer> getSIterator() {
      return (this.s == null) ? null : this.s.iterator();
    }

    public void addToS(int elem) {
      if (this.s == null) {
        this.s = new HashSet<Integer>();
      }
      this.s.add(elem);
    }

    public Set<Integer> getS() {
      return this.s;
    }

    public echoRuntimeException_args setS(Set<Integer> s) {
      this.s = s;
      return this;
    }

    public void unsetS() {
      this.s = null;
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
      return this.s != null;
    }

    public void setSIsSet(boolean value) {
      if (!value) {
        this.s = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case S:
        if (value == null) {
          unsetS();
        } else {
          setS((Set<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case S:
        return getS();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case S:
        return isSetS();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoRuntimeException_args)
        return this.equals((echoRuntimeException_args)that);
      return false;
    }

    public boolean equals(echoRuntimeException_args that) {
      if (that == null)
        return false;

      boolean this_present_s = true && this.isSetS();
      boolean that_present_s = true && that.isSetS();
      if (this_present_s || that_present_s) {
        if (!(this_present_s && that_present_s))
          return false;
        if (!this.s.equals(that.s))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_s = true && (isSetS());
      list.add(present_s);
      if (present_s)
        list.add(s);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoRuntimeException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetS()).compareTo(other.isSetS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoRuntimeException_args(");
      boolean first = true;

      sb.append("s:");
      if (this.s == null) {
        sb.append("null");
      } else {
        sb.append(this.s);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoRuntimeException_argsStandardSchemeFactory implements SchemeFactory {
      public echoRuntimeException_argsStandardScheme getScheme() {
        return new echoRuntimeException_argsStandardScheme();
      }
    }

    private static class echoRuntimeException_argsStandardScheme extends StandardScheme<echoRuntimeException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoRuntimeException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // S
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                  struct.s = new HashSet<Integer>(2*_set8.size);
                  int _elem9;
                  for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                  {
                    _elem9 = iprot.readI32();
                    struct.s.add(_elem9);
                  }
                  iprot.readSetEnd();
                }
                struct.setSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoRuntimeException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.s != null) {
          oprot.writeFieldBegin(S_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.s.size()));
            for (int _iter11 : struct.s)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoRuntimeException_argsTupleSchemeFactory implements SchemeFactory {
      public echoRuntimeException_argsTupleScheme getScheme() {
        return new echoRuntimeException_argsTupleScheme();
      }
    }

    private static class echoRuntimeException_argsTupleScheme extends TupleScheme<echoRuntimeException_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoRuntimeException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetS()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetS()) {
          {
            oprot.writeI32(struct.s.size());
            for (int _iter12 : struct.s)
            {
              oprot.writeI32(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoRuntimeException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.s = new HashSet<Integer>(2*_set13.size);
            int _elem14;
            for (int _i15 = 0; _i15 < _set13.size; ++_i15)
            {
              _elem14 = iprot.readI32();
              struct.s.add(_elem14);
            }
          }
          struct.setSIsSet(true);
        }
      }
    }

  }

  public static class echoRuntimeException_result implements org.apache.thrift.TBase<echoRuntimeException_result, echoRuntimeException_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoRuntimeException_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoRuntimeException_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoRuntimeException_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoRuntimeException_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoRuntimeException_result.class, metaDataMap);
    }

    public echoRuntimeException_result() {
    }

    public echoRuntimeException_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoRuntimeException_result(echoRuntimeException_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public echoRuntimeException_result deepCopy() {
      return new echoRuntimeException_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public echoRuntimeException_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoRuntimeException_result)
        return this.equals((echoRuntimeException_result)that);
      return false;
    }

    public boolean equals(echoRuntimeException_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoRuntimeException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoRuntimeException_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoRuntimeException_resultStandardSchemeFactory implements SchemeFactory {
      public echoRuntimeException_resultStandardScheme getScheme() {
        return new echoRuntimeException_resultStandardScheme();
      }
    }

    private static class echoRuntimeException_resultStandardScheme extends StandardScheme<echoRuntimeException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoRuntimeException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoRuntimeException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoRuntimeException_resultTupleSchemeFactory implements SchemeFactory {
      public echoRuntimeException_resultTupleScheme getScheme() {
        return new echoRuntimeException_resultTupleScheme();
      }
    }

    private static class echoRuntimeException_resultTupleScheme extends TupleScheme<echoRuntimeException_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoRuntimeException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoRuntimeException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echoTimeout_args implements org.apache.thrift.TBase<echoTimeout_args, echoTimeout_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoTimeout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoTimeout_args");

    private static final org.apache.thrift.protocol.TField M_FIELD_DESC = new org.apache.thrift.protocol.TField("m", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoTimeout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoTimeout_argsTupleSchemeFactory());
    }

    public Map<Double,String> m; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M((short)1, "m");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M
            return M;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M, new org.apache.thrift.meta_data.FieldMetaData("m", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoTimeout_args.class, metaDataMap);
    }

    public echoTimeout_args() {
    }

    public echoTimeout_args(
      Map<Double,String> m)
    {
      this();
      this.m = m;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoTimeout_args(echoTimeout_args other) {
      if (other.isSetM()) {
        Map<Double,String> __this__m = new HashMap<Double,String>(other.m);
        this.m = __this__m;
      }
    }

    public echoTimeout_args deepCopy() {
      return new echoTimeout_args(this);
    }

    @Override
    public void clear() {
      this.m = null;
    }

    public int getMSize() {
      return (this.m == null) ? 0 : this.m.size();
    }

    public void putToM(double key, String val) {
      if (this.m == null) {
        this.m = new HashMap<Double,String>();
      }
      this.m.put(key, val);
    }

    public Map<Double,String> getM() {
      return this.m;
    }

    public echoTimeout_args setM(Map<Double,String> m) {
      this.m = m;
      return this;
    }

    public void unsetM() {
      this.m = null;
    }

    /** Returns true if field m is set (has been assigned a value) and false otherwise */
    public boolean isSetM() {
      return this.m != null;
    }

    public void setMIsSet(boolean value) {
      if (!value) {
        this.m = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case M:
        if (value == null) {
          unsetM();
        } else {
          setM((Map<Double,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case M:
        return getM();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case M:
        return isSetM();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoTimeout_args)
        return this.equals((echoTimeout_args)that);
      return false;
    }

    public boolean equals(echoTimeout_args that) {
      if (that == null)
        return false;

      boolean this_present_m = true && this.isSetM();
      boolean that_present_m = true && that.isSetM();
      if (this_present_m || that_present_m) {
        if (!(this_present_m && that_present_m))
          return false;
        if (!this.m.equals(that.m))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_m = true && (isSetM());
      list.add(present_m);
      if (present_m)
        list.add(m);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoTimeout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetM()).compareTo(other.isSetM());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m, other.m);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoTimeout_args(");
      boolean first = true;

      sb.append("m:");
      if (this.m == null) {
        sb.append("null");
      } else {
        sb.append(this.m);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoTimeout_argsStandardSchemeFactory implements SchemeFactory {
      public echoTimeout_argsStandardScheme getScheme() {
        return new echoTimeout_argsStandardScheme();
      }
    }

    private static class echoTimeout_argsStandardScheme extends StandardScheme<echoTimeout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoTimeout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.m = new HashMap<Double,String>(2*_map16.size);
                  double _key17;
                  String _val18;
                  for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                  {
                    _key17 = iprot.readDouble();
                    _val18 = iprot.readString();
                    struct.m.put(_key17, _val18);
                  }
                  iprot.readMapEnd();
                }
                struct.setMIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoTimeout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.m != null) {
          oprot.writeFieldBegin(M_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.STRING, struct.m.size()));
            for (Map.Entry<Double, String> _iter20 : struct.m.entrySet())
            {
              oprot.writeDouble(_iter20.getKey());
              oprot.writeString(_iter20.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoTimeout_argsTupleSchemeFactory implements SchemeFactory {
      public echoTimeout_argsTupleScheme getScheme() {
        return new echoTimeout_argsTupleScheme();
      }
    }

    private static class echoTimeout_argsTupleScheme extends TupleScheme<echoTimeout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoTimeout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetM()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetM()) {
          {
            oprot.writeI32(struct.m.size());
            for (Map.Entry<Double, String> _iter21 : struct.m.entrySet())
            {
              oprot.writeDouble(_iter21.getKey());
              oprot.writeString(_iter21.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoTimeout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.m = new HashMap<Double,String>(2*_map22.size);
            double _key23;
            String _val24;
            for (int _i25 = 0; _i25 < _map22.size; ++_i25)
            {
              _key23 = iprot.readDouble();
              _val24 = iprot.readString();
              struct.m.put(_key23, _val24);
            }
          }
          struct.setMIsSet(true);
        }
      }
    }

  }

  public static class echoTimeout_result implements org.apache.thrift.TBase<echoTimeout_result, echoTimeout_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoTimeout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoTimeout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoTimeout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoTimeout_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoTimeout_result.class, metaDataMap);
    }

    public echoTimeout_result() {
    }

    public echoTimeout_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoTimeout_result(echoTimeout_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public echoTimeout_result deepCopy() {
      return new echoTimeout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public echoTimeout_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoTimeout_result)
        return this.equals((echoTimeout_result)that);
      return false;
    }

    public boolean equals(echoTimeout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoTimeout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoTimeout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoTimeout_resultStandardSchemeFactory implements SchemeFactory {
      public echoTimeout_resultStandardScheme getScheme() {
        return new echoTimeout_resultStandardScheme();
      }
    }

    private static class echoTimeout_resultStandardScheme extends StandardScheme<echoTimeout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoTimeout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoTimeout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoTimeout_resultTupleSchemeFactory implements SchemeFactory {
      public echoTimeout_resultTupleScheme getScheme() {
        return new echoTimeout_resultTupleScheme();
      }
    }

    private static class echoTimeout_resultTupleScheme extends TupleScheme<echoTimeout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoTimeout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoTimeout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echoReturnNull_args implements org.apache.thrift.TBase<echoReturnNull_args, echoReturnNull_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoReturnNull_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoReturnNull_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoReturnNull_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoReturnNull_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoReturnNull_args.class, metaDataMap);
    }

    public echoReturnNull_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoReturnNull_args(echoReturnNull_args other) {
    }

    public echoReturnNull_args deepCopy() {
      return new echoReturnNull_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoReturnNull_args)
        return this.equals((echoReturnNull_args)that);
      return false;
    }

    public boolean equals(echoReturnNull_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(echoReturnNull_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoReturnNull_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoReturnNull_argsStandardSchemeFactory implements SchemeFactory {
      public echoReturnNull_argsStandardScheme getScheme() {
        return new echoReturnNull_argsStandardScheme();
      }
    }

    private static class echoReturnNull_argsStandardScheme extends StandardScheme<echoReturnNull_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoReturnNull_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoReturnNull_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoReturnNull_argsTupleSchemeFactory implements SchemeFactory {
      public echoReturnNull_argsTupleScheme getScheme() {
        return new echoReturnNull_argsTupleScheme();
      }
    }

    private static class echoReturnNull_argsTupleScheme extends TupleScheme<echoReturnNull_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoReturnNull_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoReturnNull_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class echoReturnNull_result implements org.apache.thrift.TBase<echoReturnNull_result, echoReturnNull_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoReturnNull_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoReturnNull_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoReturnNull_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoReturnNull_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoReturnNull_result.class, metaDataMap);
    }

    public echoReturnNull_result() {
    }

    public echoReturnNull_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoReturnNull_result(echoReturnNull_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public echoReturnNull_result deepCopy() {
      return new echoReturnNull_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public echoReturnNull_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoReturnNull_result)
        return this.equals((echoReturnNull_result)that);
      return false;
    }

    public boolean equals(echoReturnNull_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoReturnNull_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoReturnNull_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoReturnNull_resultStandardSchemeFactory implements SchemeFactory {
      public echoReturnNull_resultStandardScheme getScheme() {
        return new echoReturnNull_resultStandardScheme();
      }
    }

    private static class echoReturnNull_resultStandardScheme extends StandardScheme<echoReturnNull_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoReturnNull_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoReturnNull_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoReturnNull_resultTupleSchemeFactory implements SchemeFactory {
      public echoReturnNull_resultTupleScheme getScheme() {
        return new echoReturnNull_resultTupleScheme();
      }
    }

    private static class echoReturnNull_resultTupleScheme extends TupleScheme<echoReturnNull_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoReturnNull_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoReturnNull_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echoWithNullParameter_args implements org.apache.thrift.TBase<echoWithNullParameter_args, echoWithNullParameter_args._Fields>, java.io.Serializable, Cloneable, Comparable<echoWithNullParameter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoWithNullParameter_args");

    private static final org.apache.thrift.protocol.TField L_FIELD_DESC = new org.apache.thrift.protocol.TField("l", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoWithNullParameter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoWithNullParameter_argsTupleSchemeFactory());
    }

    public List<String> l; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      L((short)1, "l");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // L
            return L;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.L, new org.apache.thrift.meta_data.FieldMetaData("l", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoWithNullParameter_args.class, metaDataMap);
    }

    public echoWithNullParameter_args() {
    }

    public echoWithNullParameter_args(
      List<String> l)
    {
      this();
      this.l = l;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoWithNullParameter_args(echoWithNullParameter_args other) {
      if (other.isSetL()) {
        List<String> __this__l = new ArrayList<String>(other.l);
        this.l = __this__l;
      }
    }

    public echoWithNullParameter_args deepCopy() {
      return new echoWithNullParameter_args(this);
    }

    @Override
    public void clear() {
      this.l = null;
    }

    public int getLSize() {
      return (this.l == null) ? 0 : this.l.size();
    }

    public java.util.Iterator<String> getLIterator() {
      return (this.l == null) ? null : this.l.iterator();
    }

    public void addToL(String elem) {
      if (this.l == null) {
        this.l = new ArrayList<String>();
      }
      this.l.add(elem);
    }

    public List<String> getL() {
      return this.l;
    }

    public echoWithNullParameter_args setL(List<String> l) {
      this.l = l;
      return this;
    }

    public void unsetL() {
      this.l = null;
    }

    /** Returns true if field l is set (has been assigned a value) and false otherwise */
    public boolean isSetL() {
      return this.l != null;
    }

    public void setLIsSet(boolean value) {
      if (!value) {
        this.l = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case L:
        if (value == null) {
          unsetL();
        } else {
          setL((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case L:
        return getL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case L:
        return isSetL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoWithNullParameter_args)
        return this.equals((echoWithNullParameter_args)that);
      return false;
    }

    public boolean equals(echoWithNullParameter_args that) {
      if (that == null)
        return false;

      boolean this_present_l = true && this.isSetL();
      boolean that_present_l = true && that.isSetL();
      if (this_present_l || that_present_l) {
        if (!(this_present_l && that_present_l))
          return false;
        if (!this.l.equals(that.l))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_l = true && (isSetL());
      list.add(present_l);
      if (present_l)
        list.add(l);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoWithNullParameter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetL()).compareTo(other.isSetL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l, other.l);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoWithNullParameter_args(");
      boolean first = true;

      sb.append("l:");
      if (this.l == null) {
        sb.append("null");
      } else {
        sb.append(this.l);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoWithNullParameter_argsStandardSchemeFactory implements SchemeFactory {
      public echoWithNullParameter_argsStandardScheme getScheme() {
        return new echoWithNullParameter_argsStandardScheme();
      }
    }

    private static class echoWithNullParameter_argsStandardScheme extends StandardScheme<echoWithNullParameter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoWithNullParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // L
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.l = new ArrayList<String>(_list26.size);
                  String _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readString();
                    struct.l.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoWithNullParameter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.l != null) {
          oprot.writeFieldBegin(L_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.l.size()));
            for (String _iter29 : struct.l)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoWithNullParameter_argsTupleSchemeFactory implements SchemeFactory {
      public echoWithNullParameter_argsTupleScheme getScheme() {
        return new echoWithNullParameter_argsTupleScheme();
      }
    }

    private static class echoWithNullParameter_argsTupleScheme extends TupleScheme<echoWithNullParameter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoWithNullParameter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetL()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetL()) {
          {
            oprot.writeI32(struct.l.size());
            for (String _iter30 : struct.l)
            {
              oprot.writeString(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoWithNullParameter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.l = new ArrayList<String>(_list31.size);
            String _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readString();
              struct.l.add(_elem32);
            }
          }
          struct.setLIsSet(true);
        }
      }
    }

  }

  public static class echoWithNullParameter_result implements org.apache.thrift.TBase<echoWithNullParameter_result, echoWithNullParameter_result._Fields>, java.io.Serializable, Cloneable, Comparable<echoWithNullParameter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echoWithNullParameter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echoWithNullParameter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echoWithNullParameter_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echoWithNullParameter_result.class, metaDataMap);
    }

    public echoWithNullParameter_result() {
    }

    public echoWithNullParameter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echoWithNullParameter_result(echoWithNullParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public echoWithNullParameter_result deepCopy() {
      return new echoWithNullParameter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public echoWithNullParameter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echoWithNullParameter_result)
        return this.equals((echoWithNullParameter_result)that);
      return false;
    }

    public boolean equals(echoWithNullParameter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echoWithNullParameter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echoWithNullParameter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echoWithNullParameter_resultStandardSchemeFactory implements SchemeFactory {
      public echoWithNullParameter_resultStandardScheme getScheme() {
        return new echoWithNullParameter_resultStandardScheme();
      }
    }

    private static class echoWithNullParameter_resultStandardScheme extends StandardScheme<echoWithNullParameter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echoWithNullParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echoWithNullParameter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echoWithNullParameter_resultTupleSchemeFactory implements SchemeFactory {
      public echoWithNullParameter_resultTupleScheme getScheme() {
        return new echoWithNullParameter_resultTupleScheme();
      }
    }

    private static class echoWithNullParameter_resultTupleScheme extends TupleScheme<echoWithNullParameter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echoWithNullParameter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echoWithNullParameter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
